{"version":3,"sources":["components/Game/StatusBar/Lives/lives.module.scss","components/Game/Board/Field/Cell/cell.module.scss","components/Game/Board/LabelScreen/label.module.scss","components/Game/game.module.scss","components/Game/Board/WaitCircle/wait.module.scss","components/Game/Board/board.module.scss","components/Game/Board/Field/field.module.scss","redux/modules/game/actionTypes.js","constants/game.js","redux/modules/game/reducer.js","redux/modules/game/index.js","redux/modules/index.js","redux/store.js","components/Game/StatusBar/Lives/HeartEmpty/HeartEmpty.js","components/Game/StatusBar/Lives/HeartFull/HeartFull.js","components/Game/StatusBar/Lives/Lives.js","components/Game/StatusBar/StatusBar.js","components/Game/Board/LabelScreen/LabelScreen.js","components/Game/Board/Field/Cell/Cell.js","components/Game/Board/Field/Field.js","utils/helpers.js","redux/modules/game/actions.js","components/Game/Board/WaitCircle/WaitCircle.js","components/Game/Board/Board.js","components/Game/Game.js","components/Root/Root.js","index.js","serviceWorker.js","components/Game/StatusBar/statusbar.module.scss"],"names":["module","exports","lives","hearts","heart","cell","blankCell","snakeCell","fruitCell","fruitCellAppear","snakeHead","screen","screenAppear","label","blink","game","flash","main","circle","countdown","board","field","SET_GAME_STATE","PAUSE_GAME","SET_LEVEL","SET_DIRECTION","FIELD_SIZE","CELL_TYPES","BLANK","SNAKE","FRUIT","DIRECTION","TOP","RIGHT","BOTTOM","LEFT","FRUITS_PER_LEVEL","initialState","Immutable","pause","gameOver","score","level","cells","snakeCells","nextLevelCountdown","direction","reducer","state","arguments","length","undefined","action","type","value","set","combineReducers","configureStore","middleware","thunk","composedEnhancers","compose","apply","applyMiddleware","concat","createStore","rootReducer","HeartEmpty","className","this","props","react_default","a","createElement","version","viewBox","xmlSpace","d","React","Component","HeartFull","style","fill","Lives","_this$props","max","i","push","HeartFull_HeartFull","key","styles","HeartEmpty_HeartEmpty","StatusBarValueString","_ref","index_esm","valueContainer","flashClassName","valueContainerActive","outerElementType","StatusBar","_React$Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","bar","logo","section","marginRight","Lives_Lives","StatusBar_StatusBarValueString","connect","ownProps","get","LabelScreen","active","classNames","defineProperty","Cell","cellClassName","x","y","cellType","isSnakeHead","left","top","width","height","getIn","Field","Field_Cell_Cell","randomArrayElement","arr","Math","floor","random","getRandomFruitPosition","allPositions","bestPositions","forEach","row","cellValue","getInitCellPositions","center","Array","setIn","fruitPosition","WaitCircle","r","cx","cy","window","Board","_getPrototypeOf2","_this","_len","args","_key","call","gameTickTimeoutId","showWaitCircle","doGameTick","_ref$skipTick","skipTick","_ref$startReadiness","startReadiness","setState","clearTimeout","tickTimeout","setTimeout","gameTick","stopGame","resumeGame","setDirection","bindKeys","_this$props2","restartGame","pauseGame","unBindKeys","unbind","prevProps","prevState","snapshot","_this$props3","sizePx","Field_Field","LabelScreen_LabelScreen","WaitCircle_WaitCircle","radius","dispatch","getState","target","headPosition","position","checkCrash","_getInitCellPositions2","fruitEaten","unshift","endPosition","size","toJS","pop","allow","_getInitCellPositions","Game","flashDuration","compare","nextProps","Game_StatusBar_StatusBar","Game_Board_Board","Root","store","react_redux_es","components_Game_Game","document","querySelector","ReactDOM","render","Root_Root","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.abbf8815.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"lives\":\"lives_lives__25sR3\",\"hearts\":\"lives_hearts__3ieUK\",\"heart\":\"lives_heart__3ZrLf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"cell_cell__3UvwD\",\"blankCell\":\"cell_blankCell__1Ng5v\",\"snakeCell\":\"cell_snakeCell__3QAz5\",\"fruitCell\":\"cell_fruitCell__1_Dfm\",\"fruitCellAppear\":\"cell_fruitCellAppear__2T3pj\",\"snakeHead\":\"cell_snakeHead__1IH_J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"screen\":\"label_screen__2QX8H\",\"screenAppear\":\"label_screenAppear__1JsD8\",\"label\":\"label_label__3nZJC\",\"blink\":\"label_blink__2fOy3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"game_game__1hs_r\",\"flash\":\"game_flash__18sLW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"wait_main__21O_n\",\"circle\":\"wait_circle__2pKdt\",\"countdown\":\"wait_countdown__PMJ85\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"board_board__3SerM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"field_field__1ZuUU\"};","export const SET_GAME_STATE = 'app/game/SET_GAME_STATE';\nexport const PAUSE_GAME = 'app/game/PAUSE_GAME';\nexport const SET_LEVEL = 'app/game/SET_LEVEL';\nexport const SET_DIRECTION = 'app/game/SET_DIRECTION';\n","export const FIELD_SIZE = 21;\nexport const CELL_SIZE_PX = 20;\nexport const CELL_MARGIN_PX = 1;\n\nexport const CELL_TYPES = {\n    BLANK: 0,\n    SNAKE: 1,\n    FRUIT: 2,\n};\n\nexport const DIRECTION = {\n    TOP: 0,\n    RIGHT: 1,\n    BOTTOM: 2,\n    LEFT: 3,\n};\n\nexport const FRUITS_PER_LEVEL = 5;\n","import * as Immutable from 'immutable';\nimport { SET_GAME_STATE, PAUSE_GAME, SET_LEVEL, SET_DIRECTION } from './actionTypes';\nimport { DIRECTION } from '../../../constants/game';\n\nconst initialState = new Immutable.Map({\n    pause: false,\n    gameOver: false,\n    score: null,\n    level: null,\n    lives: null,\n    cells: null,\n    snakeCells: null,\n    nextLevelCountdown: null,\n    direction: DIRECTION.TOP,\n});\n\nexport default function reducer(state = initialState, action = {}) {\n    switch (action.type) {\n        case SET_GAME_STATE: {\n            return action.state;\n        }\n        case PAUSE_GAME: {\n            const { value } = action;\n            return state.set('pause', value);\n        }\n        case SET_LEVEL: {\n            const { level } = action;\n            return state.set('level', level);\n        }\n        case SET_DIRECTION: {\n            const { direction } = action;\n            return state.set('direction', direction);\n        }\n        default:\n            return state;\n    }\n}\n","import reducer from './reducer';\n\nexport default reducer;\n","import { combineReducers } from 'redux';\n\nimport game from './game';\n\nexport default combineReducers({\n    game,\n});\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './modules';\n\nconst configureStore = () => {\n    const initialState = {};\n    const enhancers = [];\n    const middleware = [thunk];\n\n    if (process.env.NODE_ENV !== 'production') {\n        const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__;\n\n        if (typeof devToolsExtension === 'function') {\n            enhancers.push(devToolsExtension());\n        }\n    }\n\n    const composedEnhancers = compose(\n        applyMiddleware(...middleware),\n        ...enhancers,\n    );\n\n    const store = createStore(rootReducer, initialState, composedEnhancers);\n\n    if (process.env.NODE_ENV !== 'production') {\n        if (module.hot) {\n            module.hot.accept('./modules', () => {\n                store.replaceReducer(rootReducer);\n            });\n        }\n    }\n\n    return store;\n};\n\nexport default configureStore;\n","/* eslint-disable max-len */\nimport React from 'react';\n\nexport default class HeartEmpty extends React.Component {\n    render() {\n        const { className } = this.props;\n\n        return (\n            <svg className={className} version=\"1.1\" viewBox=\"0 0 51.997 51.997\" xmlSpace=\"preserve\">\n                <g>\n                    <path\n                        d=\"M51.911,16.242C51.152,7.888,45.239,1.827,37.839,1.827c-4.93,0-9.444,2.653-11.984,6.905\n\t\tc-2.517-4.307-6.846-6.906-11.697-6.906c-7.399,0-13.313,6.061-14.071,14.415c-0.06,0.369-0.306,2.311,0.442,5.478\n\t\tc1.078,4.568,3.568,8.723,7.199,12.013l18.115,16.439l18.426-16.438c3.631-3.291,6.121-7.445,7.199-12.014\n\t\tC52.216,18.553,51.97,16.611,51.911,16.242z M49.521,21.261c-0.984,4.172-3.265,7.973-6.59,10.985L25.855,47.481L9.072,32.25\n\t\tc-3.331-3.018-5.611-6.818-6.596-10.99c-0.708-2.997-0.417-4.69-0.416-4.701l0.015-0.101C2.725,9.139,7.806,3.826,14.158,3.826\n\t\tc4.687,0,8.813,2.88,10.771,7.515l0.921,2.183l0.921-2.183c1.927-4.564,6.271-7.514,11.069-7.514\n\t\tc6.351,0,11.433,5.313,12.096,12.727C49.938,16.57,50.229,18.264,49.521,21.261z\"\n                    />\n                    <path\n                        d=\"M15.999,7.904c-5.514,0-10,4.486-10,10c0,0.553,0.447,1,1,1s1-0.447,1-1c0-4.411,3.589-8,8-8c0.553,0,1-0.447,1-1\n\t\tS16.551,7.904,15.999,7.904z\"\n                    />\n                </g>\n            </svg>\n        );\n    }\n}\n","/* eslint-disable max-len */\nimport React from 'react';\n\nexport default class HeartFull extends React.Component {\n    render() {\n        const { className } = this.props;\n\n        return (\n            <svg className={className} version=\"1.1\" viewBox=\"0 0 50 50\">\n                <path\n                    style={{ fill: '#d8282e' }}\n                    d=\"M24.85,10.126c2.018-4.783,6.628-8.125,11.99-8.125c7.223,0,12.425,6.179,13.079,13.543\n\tc0,0,0.353,1.828-0.424,5.119c-1.058,4.482-3.545,8.464-6.898,11.503L24.85,48L7.402,32.165c-3.353-3.038-5.84-7.021-6.898-11.503\n\tc-0.777-3.291-0.424-5.119-0.424-5.119C0.734,8.179,5.936,2,13.159,2C18.522,2,22.832,5.343,24.85,10.126z\"\n                />\n                <path\n                    style={{ fill: '#FF7373' }}\n                    d=\"M6,18.078c-0.553,0-1-0.447-1-1c0-5.514,4.486-10,10-10c0.553,0,1,0.447,1,1s-0.447,1-1,1\n\tc-4.411,0-8,3.589-8,8C7,17.631,6.553,18.078,6,18.078z\"\n                />\n            </svg>\n        );\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport HeartEmpty from './HeartEmpty/HeartEmpty';\nimport styles from './lives.module.scss';\nimport HeartFull from './HeartFull/HeartFull';\n\nexport default class Lives extends React.Component {\n    static propTypes = {\n        value: PropTypes.number,\n        max: PropTypes.number,\n    };\n\n    render() {\n        const { max, value } = this.props;\n\n        const hearts = [];\n        for (let i = 0; i < max; i += 1) {\n            if (i < value) {\n                hearts.push(<HeartFull key={`${i}_full`} className={styles.heart} />);\n            } else {\n                hearts.push(<HeartEmpty key={`${i}_empty`} className={styles.heart} />);\n            }\n        }\n\n        return (\n            <div className={styles.lives}>\n                <div className={styles.label}>Lives:</div>\n                <div className={styles.hearts}>{hearts}</div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport FlashChange from '@avinlab/react-flash-change';\nimport styles from './statusbar.module.scss';\nimport Lives from './Lives/Lives';\n\nconst StatusBarValueString = ({ value }) => (\n    <FlashChange\n        value={value}\n        className={styles.valueContainer}\n        flashClassName={styles.valueContainerActive}\n        outerElementType=\"span\"\n    >\n        <span>{value}</span>\n    </FlashChange>\n);\n\nexport class StatusBar extends React.Component {\n    render() {\n        const { score, level, lives } = this.props;\n\n        if (level === null) {\n            return (\n                <div className={styles.bar}>\n                    <div className={styles.logo}>SNAKE</div>\n                </div>\n            );\n        }\n\n        return (\n            <div className={styles.bar}>\n                <div className={styles.section} style={{ marginRight: 10 }}>\n                    <Lives value={lives} max={3} />\n                </div>\n                <div className={styles.section}>\n                    Level:\n                    <StatusBarValueString value={level} />\n                </div>\n                <div className=\"filler\" />\n                <div className={styles.section}>\n                    Score:\n                    <StatusBarValueString value={score} />\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        score: state.game.get('score'),\n        level: state.game.get('level'),\n        lives: state.game.get('lives'),\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    {},\n)(StatusBar);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport styles from './label.module.scss';\n\nexport default class LabelScreen extends React.Component {\n    static propTypes = {\n        active: PropTypes.bool.isRequired,\n        label: PropTypes.node.isRequired,\n        blink: PropTypes.bool,\n    };\n\n    render() {\n        const { active, label, blink } = this.props;\n        if (!active) {\n            return null;\n        }\n\n        return (\n            <div className={styles.screen}>\n                <div className={classNames(styles.label, { [styles.blink]: blink })}>{label}</div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport styles from './cell.module.scss';\nimport { CELL_MARGIN_PX, CELL_SIZE_PX, CELL_TYPES } from '../../../../../constants/game';\n\nexport class Cell extends React.Component {\n    static propTypes = {\n        cellType: PropTypes.number.isRequired,\n        x: PropTypes.number.isRequired,\n        y: PropTypes.number.isRequired,\n    };\n\n    render() {\n        const { x, y, cellType, isSnakeHead } = this.props;\n\n        let cellClassName;\n\n        switch (cellType) {\n            case CELL_TYPES.BLANK: {\n                cellClassName = styles.blankCell;\n                break;\n            }\n            case CELL_TYPES.SNAKE: {\n                cellClassName = styles.snakeCell;\n                break;\n            }\n            case CELL_TYPES.FRUIT: {\n                cellClassName = styles.fruitCell;\n                break;\n            }\n            default:\n        }\n\n        return (\n            <div\n                className={classNames(styles.cell, cellClassName, { [styles.snakeHead]: isSnakeHead })}\n                style={{\n                    left: CELL_MARGIN_PX + x * (CELL_SIZE_PX + CELL_MARGIN_PX),\n                    top: CELL_MARGIN_PX + y * (CELL_SIZE_PX + CELL_MARGIN_PX),\n                    width: CELL_SIZE_PX,\n                    height: CELL_SIZE_PX,\n                }}\n            />\n        );\n    }\n}\n\nfunction mapStateToProps(state, ownProps) {\n    const { y, x } = ownProps;\n\n    return {\n        cellType: state.game.getIn(['cells', y, x]),\n        isSnakeHead: state.game.getIn(['snakeCells', 0, 0]) === y && state.game.getIn(['snakeCells', 0, 1]) === x,\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    {},\n)(Cell);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Cell from './Cell/Cell';\nimport styles from './field.module.scss';\nimport { FIELD_SIZE } from '../../../../constants/game';\n\nexport class Field extends React.Component {\n    render() {\n        const cells = [];\n        for (let y = 0; y < FIELD_SIZE; y += 1) {\n            for (let x = 0; x < FIELD_SIZE; x += 1) {\n                cells.push(<Cell x={x} y={y} key={`${y}_${x}`} />);\n            }\n        }\n\n        return <div className={styles.field}>{cells}</div>;\n    }\n}\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        cells: state.game.get('cells'),\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    {},\n)(Field);\n","export function randomArrayElement(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n}\n","import * as Immutable from 'immutable';\nimport { SET_GAME_STATE, PAUSE_GAME, SET_LEVEL, SET_DIRECTION } from './actionTypes';\nimport { CELL_TYPES, DIRECTION, FIELD_SIZE, FRUITS_PER_LEVEL } from '../../../constants/game';\nimport { randomArrayElement } from '../../../utils/helpers';\n\n/**\n * Get coordinates for apple\n * @param cells\n * @returns {*}\n */\nfunction getRandomFruitPosition(cells) {\n    // All free cells\n    const allPositions = [];\n    // Best positions for placing\n    const bestPositions = [];\n    cells.forEach((row, y) => {\n        row.forEach((cellValue, x) => {\n            if (cellValue === CELL_TYPES.BLANK) {\n                allPositions.push([y, x]);\n\n                // Don't touch borders\n                if (y > 0 && y < FIELD_SIZE - 1 && x > 0 && x < FIELD_SIZE - 1) {\n                    bestPositions.push([y, x]);\n                }\n            }\n        });\n    });\n\n    // Get random position\n    if (bestPositions.length) {\n        return randomArrayElement(bestPositions);\n    }\n    return randomArrayElement(allPositions);\n}\n\n/**\n * Get cells for init state\n * @returns {{cells: any, snakeCells: List}}\n */\nfunction getInitCellPositions() {\n    const center = Math.floor(FIELD_SIZE / 2);\n\n    let snakeCells = new Immutable.List();\n\n    let cells = Immutable.fromJS(Array(FIELD_SIZE).fill(Array(FIELD_SIZE).fill(CELL_TYPES.BLANK)));\n\n    // Place snake\n    for (let i = 0; i < 3; i += 1) {\n        cells = cells.setIn([center + i, center], CELL_TYPES.SNAKE);\n        snakeCells = snakeCells.push(new Immutable.List([center + i, center]));\n    }\n\n    const fruitPosition = getRandomFruitPosition(cells);\n    cells = cells.setIn(fruitPosition, CELL_TYPES.FRUIT);\n\n    return { cells, snakeCells };\n}\n\n/**\n * Restart game\n * @returns {{type: string}}\n */\nexport function restartGame() {\n    const { cells, snakeCells } = getInitCellPositions();\n\n    const state = new Immutable.Map()\n        .set('pause', false)\n        .set('gameOver', false)\n        .set('level', 1)\n        .set('lives', 3)\n        .set('score', 0)\n        .set('cells', cells)\n        .set('snakeCells', snakeCells)\n        .set('nextLevelCountdown', FRUITS_PER_LEVEL)\n        .set('direction', DIRECTION.TOP);\n\n    return {\n        type: SET_GAME_STATE,\n        state,\n    };\n}\n\n/**\n * Pause game\n * @param value\n * @returns {{type: string, value: *}}\n */\nexport function pauseGame(value) {\n    return {\n        type: PAUSE_GAME,\n        value,\n    };\n}\n\n/**\n * Change level\n * @param level\n * @returns {{level: *, type: string}}\n */\nexport function changeLevel(level) {\n    return {\n        type: SET_LEVEL,\n        level,\n    };\n}\n\n/**\n * Check collision\n * @param position\n * @param cells\n * @returns {boolean}\n */\nfunction checkCrash(position, cells) {\n    // Touch borders\n    if (position[0] < 0 || position[0] > FIELD_SIZE - 1 || position[1] < 0 || position[1] > FIELD_SIZE - 1) {\n        return true;\n    }\n\n    // Touch myself\n    if (cells.getIn(position) === CELL_TYPES.SNAKE) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Game tick\n */\nexport function gameTick() {\n    return (dispatch, getState) => {\n        let { game } = getState();\n\n        const gameOver = game.get('gameOver');\n        const pause = game.get('pause');\n\n        if (gameOver || pause) {\n            return;\n        }\n\n        const direction = game.get('direction');\n        const score = game.get('score');\n        const level = game.get('level');\n        const nextLevelCountdown = game.get('nextLevelCountdown');\n        let snakeCells = game.get('snakeCells');\n        let cells = game.get('cells');\n\n        const headPosition = snakeCells.get(0);\n\n        let target;\n        switch (direction) {\n            case DIRECTION.TOP: {\n                target = [headPosition.get(0) - 1, headPosition.get(1)];\n                break;\n            }\n            case DIRECTION.RIGHT: {\n                target = [headPosition.get(0), headPosition.get(1) + 1];\n                break;\n            }\n            case DIRECTION.BOTTOM: {\n                target = [headPosition.get(0) + 1, headPosition.get(1)];\n                break;\n            }\n            case DIRECTION.LEFT: {\n                target = [headPosition.get(0), headPosition.get(1) - 1];\n                break;\n            }\n            default:\n        }\n\n        // Check collision\n        if (checkCrash(target, cells)) {\n            const { cells, snakeCells } = getInitCellPositions();\n\n            const lives = game.get('lives');\n            if (lives > 1) {\n                // Decrease lives and continue\n                game = game\n                    .set('snakeCells', snakeCells)\n                    .set('cells', cells)\n                    .set('direction', DIRECTION.TOP)\n                    .set('lives', lives - 1);\n            } else {\n                // Game Over!\n                game = game.set('gameOver', true).set('lives', 0);\n            }\n\n            return dispatch({\n                type: SET_GAME_STATE,\n                state: game,\n            });\n        }\n\n        // Check if apple has been eaten\n        const fruitEaten = cells.getIn(target) === CELL_TYPES.FRUIT;\n\n        snakeCells = snakeCells.unshift(new Immutable.List(target));\n        cells = cells.setIn(target, CELL_TYPES.SNAKE);\n\n        // If apple has been eaten  - remove last snake's cell\n        if (fruitEaten) {\n            // Draw a new apple\n            const fruitPosition = getRandomFruitPosition(cells);\n            cells = cells.setIn(fruitPosition, CELL_TYPES.FRUIT);\n\n            // Increase score\n            game = game.set('score', score + 10);\n\n            if (nextLevelCountdown > 1) {\n                game = game.set('nextLevelCountdown', nextLevelCountdown - 1);\n            } else {\n                game = game.set('nextLevelCountdown', FRUITS_PER_LEVEL);\n                game = game.set('level', level + 1);\n            }\n        } else {\n            // Remove last cell\n            const endPosition = snakeCells.get(snakeCells.size - 1).toJS();\n            snakeCells = snakeCells.pop();\n            cells = cells.setIn(endPosition, CELL_TYPES.BLANK);\n        }\n\n        game = game.set('snakeCells', snakeCells).set('cells', cells);\n\n        dispatch({\n            type: SET_GAME_STATE,\n            state: game,\n        });\n    };\n}\n\n/**\n * Set move direction (with testing ability to move there)\n * @param direction\n * @returns {Function}\n */\nexport function setDirection(direction) {\n    return (dispatch, getState) => {\n        const headPosition = getState().game.getIn(['snakeCells', 0]);\n        const cells = getState().game.get('cells');\n        let allow = true;\n        switch (direction) {\n            case DIRECTION.TOP: {\n                allow = cells.getIn([headPosition.get(0) - 1, headPosition.get(1)]) !== CELL_TYPES.SNAKE;\n                break;\n            }\n            case DIRECTION.RIGHT: {\n                allow = cells.getIn([headPosition.get(0), headPosition.get(1) + 1]) !== CELL_TYPES.SNAKE;\n                break;\n            }\n            case DIRECTION.BOTTOM: {\n                allow = cells.getIn([headPosition.get(0) + 1, headPosition.get(1)]) !== CELL_TYPES.SNAKE;\n                break;\n            }\n            case DIRECTION.LEFT: {\n                allow = cells.getIn([headPosition.get(0), headPosition.get(1) - 1]) !== CELL_TYPES.SNAKE;\n                break;\n            }\n            default:\n        }\n        if (allow) {\n            dispatch({\n                type: SET_DIRECTION,\n                direction,\n            });\n        }\n    };\n}\n","import React from 'react';\nimport styles from './wait.module.scss';\n\nexport default class WaitCircle extends React.Component {\n    render() {\n        return (\n            <svg className={styles.main}>\n                <circle className={styles.circle} r=\"18\" cx=\"20\" cy=\"20\" />\n            </svg>\n        );\n    }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styles from './board.module.scss';\nimport LabelScreen from './LabelScreen/LabelScreen';\nimport { Field } from './Field/Field';\nimport { CELL_MARGIN_PX, CELL_SIZE_PX, DIRECTION, FIELD_SIZE } from '../../../constants/game';\nimport { gameTick, pauseGame, restartGame, setDirection } from '../../../redux/modules/game/actions';\nimport WaitCircle from './WaitCircle/WaitCircle';\n\nconst { key } = window;\n\nexport class Board extends React.Component {\n    gameTickTimeoutId = null;\n\n    state = {\n        showWaitCircle: false,\n    };\n\n    doGameTick = ({ skipTick = false, startReadiness = false } = {}) => {\n        if (startReadiness) {\n            this.setState({\n                showWaitCircle: true,\n            });\n        } else if (this.state.showWaitCircle) {\n            this.setState({\n                showWaitCircle: false,\n            });\n        }\n\n        if (this.gameTickTimeoutId) {\n            clearTimeout(this.gameTickTimeoutId);\n        }\n\n        const { level } = this.props;\n\n        let tickTimeout = 120 - level * (5 - level / 10);\n\n        // If we need time to prepare\n        if (startReadiness) {\n            tickTimeout = 1000;\n        }\n\n        this.gameTickTimeoutId = setTimeout(this.doGameTick, tickTimeout);\n\n        if (skipTick || startReadiness) {\n            return;\n        }\n\n        const { gameTick } = this.props;\n        gameTick();\n    };\n\n    stopGame = () => {\n        if (this.gameTickTimeoutId) {\n            clearTimeout(this.gameTickTimeoutId);\n        }\n        if (this.state.showWaitCircle) {\n            this.setState({\n                showWaitCircle: false,\n            });\n        }\n    };\n\n    resumeGame = () => {\n        this.doGameTick({ skipTick: true });\n    };\n\n    setDirection = direction => {\n        const { level, pause, setDirection } = this.props;\n        if (level !== null && !pause) {\n            setDirection(direction);\n        }\n    };\n\n    bindKeys = () => {\n        key('up', () => {\n            this.setDirection(DIRECTION.TOP);\n        });\n\n        key('right', () => {\n            this.setDirection(DIRECTION.RIGHT);\n        });\n\n        key('down', () => {\n            this.setDirection(DIRECTION.BOTTOM);\n        });\n\n        key('left', () => {\n            this.setDirection(DIRECTION.LEFT);\n        });\n\n        key('space', () => {\n            const { level, restartGame, pauseGame, pause, gameOver } = this.props;\n            if (level === null || gameOver) {\n                restartGame();\n            } else {\n                pauseGame(!pause);\n            }\n        });\n    };\n\n    unBindKeys = () => {\n        key.unbind('top');\n        key.unbind('right');\n        key.unbind('bottom');\n        key.unbind('left');\n        key.unbind('space');\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (\n            // If game beginning\n            (!prevProps.level && this.props.level) ||\n            // Or restart after game over\n            // Или рестарт после гамовера\n            (prevProps.gameOver && !this.props.gameOver)\n        ) {\n            this.doGameTick({ startReadiness: true });\n        }\n\n        if (this.props.lives < prevProps.lives && !this.props.gameOver) {\n            this.doGameTick({ startReadiness: true });\n        }\n\n        if (!prevProps.gameOver && this.props.gameOver) {\n            this.stopGame();\n        }\n\n        if (!prevProps.pause && this.props.pause) {\n            this.stopGame();\n        }\n\n        if (prevProps.pause && !this.props.pause) {\n            this.resumeGame();\n        }\n    }\n\n    componentDidMount() {\n        this.bindKeys();\n    }\n\n    componentWillUnmount() {\n        this.stopGame();\n        this.unBindKeys();\n    }\n\n    render() {\n        const { pause, gameOver, level } = this.props;\n        const { showWaitCircle } = this.state;\n\n        const sizePx = (CELL_SIZE_PX + CELL_MARGIN_PX) * FIELD_SIZE + CELL_MARGIN_PX;\n        return (\n            <div\n                className={styles.board}\n                style={{\n                    width: sizePx,\n                    height: sizePx,\n                }}\n            >\n                {level !== null && <Field />}\n                <LabelScreen\n                    active={level === null}\n                    label={\n                        <div>\n                            Press\n                            <br />\n                            SPACEBAR\n                            <br />\n                            to start<br />\n                             <span>Use the Arrow keys and Don't hit the wall! </span>\n                        </div>\n                    }\n                />\n                <LabelScreen active={pause} label=\"Pause\" blink />\n                <LabelScreen active={gameOver} label=\"Game Over\" />\n\n                {showWaitCircle && <WaitCircle radius={20} />}\n\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        pause: state.game.get('pause'),\n        level: state.game.get('level'),\n        lives: state.game.get('lives'),\n        startReadiness: state.game.get('startReadiness'),\n        gameOver: state.game.get('gameOver'),\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    {\n        gameTick,\n        setDirection,\n        restartGame,\n        pauseGame,\n    },\n)(Board);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport FlashChange from '@avinlab/react-flash-change';\nimport StatusBar from './StatusBar/StatusBar';\nimport styles from './game.module.scss';\nimport Board from './Board/Board';\n\nexport class Game extends React.Component {\n    render() {\n        const { score } = this.props;\n        return (\n            <FlashChange\n                value={score}\n                flashDuration={100}\n                className={styles.game}\n                flashClassName={styles.flash}\n                outerElementType=\"span\"\n                compare={(prevProps, nextProps) => nextProps.value > prevProps.value}\n            >\n                <StatusBar />\n                <Board />\n            </FlashChange>\n        );\n    }\n}\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        score: state.game.get('score'),\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    {},\n)(Game);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Game from '../Game/Game';\n\nexport default class Root extends React.Component {\n    render() {\n        const { store } = this.props;\n        return (\n            <Provider store={store}>\n                <div className=\"filler\">\n                    <Game />\n                </div>\n            </Provider>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport configureStore from './redux/store';\nimport Root from './components/Root/Root';\nimport './styles/index.scss';\nimport * as serviceWorker from './serviceWorker';\n\n// Init redux-store\nconst store = configureStore();\n\n// Mount React container on page\nconst target = document.querySelector('#root');\nReactDOM.render(<Root store={store} />, target);\n\nif (module.hot) {\n    module.hot.accept('./components/Root/Root', () => {\n        ReactDOM.render(<Root store={store} />, target);\n    });\n}\n\nserviceWorker.unregister();\n","export function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bar\":\"statusbar_bar__3-Mvw\",\"section\":\"statusbar_section__1L_Gn\",\"logo\":\"statusbar_logo__ucU84\",\"valueContainer\":\"statusbar_valueContainer__nzlQi\",\"valueContainerActive\":\"statusbar_valueContainerActive__2kdwm\"};"],"sourceRoot":""}